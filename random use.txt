Perfect 👌 Let’s dive into **`random` in Python**. It’s one of the most fun libraries and super useful for games, simulations, or even generating data.

---

# 🔹 1. Importing the library

```python
import random
```

Everything starts with this.

---

# 🔹 2. Most common functions

Here are the ones you’ll use the most:

### ✅ `random.random()`

* Returns a float between `0.0` and `1.0`.

```python
print(random.random())   # e.g. 0.23456789
```

Good for probabilities (e.g., 30% chance of something happening).

---

### ✅ `random.randint(a, b)`

* Returns an **integer** between `a` and `b` (inclusive).

```python
print(random.randint(1, 6))  # simulates a dice roll (1–6)
```

---

### ✅ `random.uniform(a, b)`

* Returns a **float** between `a` and `b`.

```python
print(random.uniform(1, 10))   # e.g. 3.14159
```

Good for simulations that need decimals (physics, money amounts, etc.).

---

### ✅ `random.choice(sequence)`

* Picks one random element from a list, tuple, or string.

```python
colors = ["red", "blue", "green"]
print(random.choice(colors))   # e.g. "blue"
```

Perfect for games where you want to randomly pick a move, card, etc.

---

### ✅ `random.choices(sequence, k=n)`

* Picks `n` elements from a list, **with replacement** (can repeat).

```python
print(random.choices(colors, k=3))   # e.g. ['red', 'red', 'green']
```

---

### ✅ `random.sample(sequence, k=n)`

* Picks `n` elements **without replacement** (no repeats).

```python
print(random.sample(colors, k=2))   # e.g. ['blue', 'green']
```

---

### ✅ `random.shuffle(sequence)`

* Shuffles a list in place.

```python
deck = [1, 2, 3, 4, 5]
random.shuffle(deck)
print(deck)   # e.g. [3, 5, 1, 4, 2]
```

Great for card games.

---

# 🔹 3. Different cases of use

### 🎲 Games

* Dice roll → `random.randint(1, 6)`
* Random move in rock–paper–scissors → `random.choice(["rock", "paper", "scissors"])`

### 📊 Simulations

* Simulate coin toss → `random.choice(["heads", "tails"])`
* Simulate probability → if `random.random() < 0.3`, event happens (30% chance).

### 🃏 Cards / Lottery

* Shuffle deck → `random.shuffle(deck)`
* Pick lottery numbers → `random.sample(range(1, 50), 6)`

### 🔐 Security (basic, not cryptographic)

* Generate random password → pick random letters/numbers/symbols.

### 🧪 Testing

* Generate fake test data: random names, numbers, or values.

---

⚠️ Important: Python’s `random` is **pseudo-random**, meaning it’s based on an algorithm. For games and projects, it’s fine. For security (passwords, tokens), you’d use the `secrets` module instead.

---

👉 Do you want me to give you a few **mini exercises** with `random` (like dice, coin flip, pick a random student) so you can test it right now before coding the number guesser?
